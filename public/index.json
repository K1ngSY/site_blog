[{"content":"🧮 行列运算对行列式的影响（Determinant Effects of Row/Column Operations） #一、三种基本行运算及其影响 # 操作类型 符号表示 含义 对行列式的影响 交换两行 Rᵢ ↔ Rⱼ 把第 i 行与第 j 行互换 行列式乘以 −1 数乘一行 Rᵢ → cRᵢ 把第 i 行的所有元素乘以常数 c 行列式乘以 c 行加倍操作 Rᵢ → Rᵢ + cRⱼ 把第 j 行的 c 倍加到第 i 行 行列式 不变 💡 以上三种操作称为「初等行变换（Elementary Row Operations）」。\n对列操作（Column Operations）同理，效果完全对称。\n二、列运算的影响（对称性质） # 操作类型 符号表示 含义 对行列式的影响 交换两列 Cᵢ ↔ Cⱼ 把第 i 列与第 j 列互换 行列式乘以 −1 数乘一列 Cᵢ → cCᵢ 把第 i 列的所有元素乘以常数 c 行列式乘以 c 列加倍操作 Cᵢ → Cᵢ + cCⱼ 把第 j 列的 c 倍加到第 i 列 行列式 不变 三、多次交换的符号规律 #若矩阵 (A) 经过 k 次行交换（或列交换）得到矩阵 (B)，则：\n[ \\det(B) = (-1)^k \\det(A) ]\n交换 奇数次 → 行列式乘以 −1 交换 偶数次 → 行列式 不变 四、总结口诀（易记版） # “一换变负号，双换又还原；\n数乘乘常量，加倍不改变。”\n五、补充说明 # 交换行或列是 符号变化操作。 数乘行或列是 倍数变化操作。 加倍操作（把一行加上另一行的倍数）是 行列式不变操作。 若两行（或两列）成比例或相同，则行列式为 0。 若某行（或某列）全为 0，行列式也为 0。 转置矩阵不改变行列式：\n[ \\det(A^T) = \\det(A) ] 📘 Quick Summary in English\nOperation Effect on det(A) Swap two rows/columns × (−1) Multiply a row/column by c × c Add multiple of one row/column to another No change k swaps total × (−1)ᵏ Two identical/proportional rows/columns det(A) = 0 Aᵀ (Transpose) det(Aᵀ) = det(A) ","date":"8 October 2025","permalink":"http://localhost:56847/posts/linear-algebra/","section":"Posts","summary":"Some tips for my Linear Algebra Study","title":"Linear Algebra"},{"content":"","date":null,"permalink":"http://localhost:56847/tags/posts/","section":"Tags","summary":"","title":"Posts"},{"content":"","date":null,"permalink":"http://localhost:56847/","section":"Shunyao | Blog","summary":"","title":"Shunyao | Blog"},{"content":"","date":null,"permalink":"http://localhost:56847/tags/","section":"Tags","summary":"","title":"Tags"},{"content":"Awesome GitHub Projects 🚀 #This page is dedicated to showcasing interesting, inspiring, or technically impressive projects I’ve discovered on GitHub.\nEach entry follows a simple format for consistency.\n📌 Project: OctoBot #Description:\nOctoBot is an open-source cryptocurrency trading bot designed to provide flexible, automated trading strategies. It supports multiple exchanges, offers backtesting capabilities, and enables both beginners and advanced users to experiment with algorithmic trading.\nWhy It’s Interesting:\nOctoBot stands out because it integrates AI-powered prediction models into trading strategies. Most notably, it allows users to connect to custom LLMs via a configurable base URL—making it possible to use alternatives beyond OpenAI models. This flexibility includes support for local AI setups like Ollama, which means traders can experiment with running their own prediction models locally. Such extensibility opens the door to more privacy, cost efficiency, and creativity in designing AI-driven trading systems.\nTech Stack:\nLanguages: Python Tools: Docker, AsyncIO, WebSocket, REST APIs Key Features:\nCustom LLM base URL for predictions (connect to any AI model, not only OpenAI) Seamless integration with Ollama for local LLM trading predictions Multi-exchange support with real-time market data Strategy customization with backtesting and simulation Active open-source community and continuous development My contribution: 📌 Project: RustDesk #Description:\nRustDesk is a free, open-source remote desktop software written in Rust. It provides a full-featured alternative to commercial tools like TeamViewer or AnyDesk, enabling secure remote access, desktop sharing, file transfer, and screen control. Unlike many competitors, RustDesk is completely transparent and community-driven, ensuring users retain control over their data and connections.\nWhy It’s Interesting:\nWhat makes RustDesk stand out is its ease of deployment and flexibility. By default, it supports both relay (proxy) connections and direct peer-to-peer connections, meaning it can work reliably across firewalls and NAT environments. For users who want full privacy and independence, hosting a personal RustDesk server is straightforward: running a single lightweight Docker container is often all it takes. This setup not only provides greater control over remote sessions but also removes the need for expensive monthly subscriptions to proprietary remote desktop software—often saving $10 or more per month.\nRustDesk is also designed with convenience and accessibility in mind. Its user-friendly interface makes it approachable for non-technical users, while its cross-platform support (Windows, macOS, Linux, iOS, and Android) ensures it fits into almost any environment. The project has an active open-source community that continuously improves stability, performance, and features.\nTech Stack:\nLanguage: Rust (core implementation) UI: Flutter for cross-platform interfaces Tools: Docker, WebRTC, NAT traversal technologies Key Features:\n🔑 End-to-end encryption for secure remote sessions 🔄 Support for both relay and direct P2P connections 🐳 Easy self-hosting with a simple Docker container 💻 Cross-platform: Windows, macOS, Linux, iOS, Android 📂 File transfer, clipboard sync, and multi-monitor support 🌍 Open-source, with an active and fast-growing community ","date":"3 September 2025","permalink":"http://localhost:56847/posts/awesome-github-projects/","section":"Posts","summary":"Showcasing inspiring open-source work that caught my attention on GitHub.","title":"Awesome GitHub Projects"},{"content":"","date":null,"permalink":"http://localhost:56847/tags/open-source/","section":"Tags","summary":"","title":"Open-Source"},{"content":"Ark Alarm Bot V2 #Ark Alarm Bot V2 (GitHub repository) is an automated monitoring and alerting tool for Windows, designed for ARK: Survival Ascended.\nThe first generation of the project was called ASA-Faerie (GitHub repository). Since the initial version suffered from frequent crashes and was filled with spaghetti code (the V2 codebase is still not fully standardized but represents a significant improvement), I spent several months gradually refactoring and rewriting the project.\nThis V2 version is re-implemented in C++17 and Qt 6.9, leveraging OpenCV and Tesseract OCR to provide unattended game-guarding functionality.\n🛠 Tech Stack # C++17 Qt 6.9 OpenCV Tesseract OCR Ark Alarm V2 Technical Overview #Introduction #Ark Alarm V2 is the second generation of an open-source Ark: Survival Evolved alarm assistant. While the initial V1 prototype proved the concept, it suffered from limited modularity and brittle platform integration. Version 2 was rewritten in C++17 and Qt 6.9 to achieve higher OCR accuracy and better program stability. Major improvements include:\nA unified image processing pipeline built on OpenCV 4.x and Tesseract 5.x. Robust crash detection and automatic recovery from the \u0026ldquo;Shooter Crash Reporter\u0026rdquo; dialog. A rejoiner subsystem that re-enters servers after disconnects. Ark Alarm V2 dashboard showing overlay and status widgets Quick Facts / Tech Stack # Component Version / Example Notes Language C++17 Multi-threaded via QtConcurrent UI Toolkit Qt 6.9 Widgets, signals/slots Image Processing OpenCV 4.x Window capture, filtering OCR Engine Tesseract 5.x LSTM-based recognition Build System QMake Comes with Qt Creator Packaging WiX Toolset / NSIS \u0026gt; TODO: verify installer choice Architecture Overview #Ark Alarm V2 is divided into loosely coupled modules communicating through Qt signals. The core components are:\nDashboard: primary UI, user preferences, server list. Scanner: periodic window capture, preprocesses frames, feeds OCR. Visual Overlay: draws bounding boxes and debug layers. CrashHandler: monitors top-level windows, closes the crash reporter. Rejoiner: sequences keystrokes and mouse events to return to the game. KWorker: lightweight job queue to execute deferred tasks. flowchart TD A[Game Window Capture] --\u0026gt; B[Preprocessing] B --\u0026gt; C[OCR Recognition] C --\u0026gt; D{Decision Engine} D --\u0026gt;|Alert| E[Sender] D --\u0026gt;|Overlay| F[Visual Module] C --\u0026gt;|Debug| F G[Crash Handler] --\u0026gt; D Data flows from capture to decision modules, while auxiliary services such as the CrashHandler feed into the same decision engine.\nImage Processing \u0026amp; OCR Pipeline #The pipeline converts game frames into actionable signals:\nWindow Capture – Using Win32 APIs or X11 depending on platform. Preprocessing – Grayscale, thresholding, contour detection. OCR – Tesseract extracts tokens like \u0026ldquo;TRIBE LOG\u0026rdquo; or \u0026ldquo;TAMED DINOSAUR\u0026rdquo;. Decision – A rules engine triggers actions (notifications, auto-rejoin). The pipeline embraces a modular philosophy. Each step emits intermediate artifacts that can be visualized or logged for debugging. After preprocessing, morphological filters such as dilation and erosion are optionally applied to stabilize character boundaries. A region-of-interest map narrows OCR to just the tribe log and tamed-dinosaur panels, improving both speed and accuracy. Tokens are compared against a configurable list of alert phrases using a case-insensitive trie, and fuzzy matching handles minor OCR errors without triggering false positives.\nSample C++ Pipeline Code #cv::Mat frame = CaptureWindow(hwnd); cv::Mat gray; cv::cvtColor(frame, gray, cv::COLOR_BGR2GRAY); cv::Mat bin; cv::threshold(gray, bin, 0, 255, cv::THRESH_OTSU); // Invert for white-on-black text cv::bitwise_not(bin, bin); // Send to Tesseract std::unique_ptr\u0026lt;tesseract::TessBaseAPI\u0026gt; ocr(new tesseract::TessBaseAPI); ocr-\u0026gt;Init(\u0026#34;./tessdata\u0026#34;, \u0026#34;eng\u0026#34;, tesseract::OEM_LSTM_ONLY); ocr-\u0026gt;SetImage(bin.data, bin.cols, bin.rows, 1, bin.step); std::string text = ocr-\u0026gt;GetUTF8Text(); HandleTokens(text); This example demonstrates end-to-end frame processing using OpenCV and Tesseract. The real code adds bounding-box extraction and per-region classification.\nCrash \u0026amp; Exception Handling #The CrashHandler continuously enumerates top-level windows. If a title matches patterns like \u0026ldquo;Shooter Crash Reporter\u0026rdquo;, the handler posts a WM_CLOSE message. The core logic uses Win32\u0026rsquo;s EnumWindows:\nstruct EnumData { QStringList *tokens; HWND found; }; EnumData data{ \u0026amp;m_crash_windows_keywords, nullptr }; ::EnumWindows([](HWND hwnd, LPARAM lparam) -\u0026gt; BOOL { auto \u0026amp;d = *reinterpret_cast\u0026lt;EnumData*\u0026gt;(lparam); if (!::IsWindowVisible(hwnd)) return TRUE; wchar_t buf[512] = {0}; ::GetWindowTextW(hwnd, buf, _countof(buf)); QString title = QString::fromWCharArray(buf).trimmed(); if (title.isEmpty()) return TRUE; for (const QString \u0026amp;t : *d.tokens) { if (!t.isEmpty() \u0026amp;\u0026amp; title.contains(t, Qt::CaseInsensitive)) { d.found = hwnd; return FALSE; // stop } } return TRUE; }, reinterpret_cast\u0026lt;LPARAM\u0026gt;(\u0026amp;data)); Once a matching window is found, the module invokes PostMessageW(data.found, WM_CLOSE, 0, 0) to dismiss the dialog. The handler also logs stack traces for further inspection.\nReconnect / Rejoin Strategy #Ark servers may drop connections due to network hiccups or server resets. The Rejoiner automates the steps needed to return to a selected server.\nstateDiagram-v2 [*] --\u0026gt; Disconnected Disconnected --\u0026gt; LaunchingGame LaunchingGame --\u0026gt; MainMenu MainMenu --\u0026gt; ServerList : Fetch servers ServerList --\u0026gt; Joining : Double-click Joining --\u0026gt; InGame InGame --\u0026gt; [*] InGame --\u0026gt; Disconnected : Connection lost The Rejoiner sequences keystrokes using Qt\u0026rsquo;s QKeyEvent APIs or Win32 input events. Each transition checks for timeouts, failed joins, or crash dialogs before proceeding. A backlog queue allows repeated attempts with exponential backoff to avoid rate limiting.\nConfiguration #Ark Alarm V2 reads a YAML file that controls capture regions, OCR thresholds, and rejoin behaviour. A minimal configuration looks like:\nwindow: title: \u0026#34;ARK: Survival Evolved\u0026#34; capture_interval_ms: 1500 ocr: lang: \u0026#34;eng\u0026#34; psm: 6 # Assume a single uniform block of text actions: on_match: - type: \u0026#34;notify\u0026#34; channel: \u0026#34;discord\u0026#34; - type: \u0026#34;overlay\u0026#34; color: \u0026#34;#00FF00\u0026#34; rejoin: max_attempts: 5 backoff_ms: [5000, 15000, 30000] Explanation:\nwindow – Contains the title token used to locate the game window and the capture interval. ocr – Language and Page Segmentation Mode for Tesseract. actions – Ordered list of tasks triggered when tokens are recognized. rejoin – Controls the backoff strategy for automatic reconnect attempts. TODO: Document advanced options for log file rotation and custom hooks.\nBuilding the Project (Windows) #Ark Alarm V2 can be built either with MSVC + vcpkg or MSYS2 + pacman. Both paths rely on a CMake-based build configured for Qt and OpenCV.\nMSVC + vcpkg ## Clone and bootstrap vcpkg PS\u0026gt; git clone https://github.com/microsoft/vcpkg.git PS\u0026gt; .\\vcpkg\\bootstrap-vcpkg.bat # Install dependencies PS\u0026gt; .\\vcpkg\\vcpkg install qtbase:x64-windows opencv[tiff]:x64-windows tesseract:x64-windows # Configure \u0026amp; build PS\u0026gt; cmake -B build -S . -DCMAKE_TOOLCHAIN_FILE=..\\vcpkg\\scripts\\buildsystems\\vcpkg.cmake -DCMAKE_BUILD_TYPE=Release PS\u0026gt; cmake --build build --config Release MSYS2 + pacman #$ pacman -S --needed base-devel mingw-w64-x86_64-toolchain $ pacman -S mingw-w64-x86_64-qt6 mingw-w64-x86_64-opencv mingw-w64-x86_64-tesseract $ cmake -B build -S . -G \u0026#34;Unix Makefiles\u0026#34; \\ -DCMAKE_PREFIX_PATH=/mingw64 \\ -DCMAKE_BUILD_TYPE=Release $ cmake --build build -j$(nproc) Sample CMakeLists.txt Snippet #cmake_minimum_required(VERSION 3.28) project(ArkAlarm VERSION 2.0 LANGUAGES CXX) set(CMAKE_CXX_STANDARD 17) find_package(Qt6 REQUIRED COMPONENTS Widgets) find_package(OpenCV 4 REQUIRED) find_package(Tesseract 5 REQUIRED) add_executable(ArkAlarm main.cpp dashboard.cpp scanner.cpp crashhandler.cpp rejoiner.cpp) target_link_libraries(ArkAlarm PRIVATE Qt6::Widgets ${OpenCV_LIBS} Tesseract::Tesseract) Common Issues # Missing tessdata – Ensure the eng.traineddata file exists under ./tessdata. Qt plugin path – On MSYS2, set QT_PLUGIN_PATH=/mingw64/lib/qt6/plugins. OpenCV ABI mismatch – Match compiler and architecture across dependencies. Unsigned driver – Some overlays require enabling test signing mode in Windows. Packaging \u0026amp; Distribution #A production build packages the following assets:\nArkAlarm.exe and Qt runtime DLLs (Qt6Core.dll, Qt6Widgets.dll, etc.). opencv_world490.dll or equivalent split modules. tesseract.dll plus leptonica.dll. tessdata/ directory with required language files. Default YAML configuration and sample server list. Checklist before shipping:\nRun windeployqt to gather Qt plugins. Include VC++ redistributable or link statically. Verify fonts and DPI settings on high-resolution monitors. Sign binaries with an Authenticode certificate if distributing broadly. Example installer built with WiX Performance \u0026amp; Reliability #Using a 1080p capture region and psm=6, the OCR step averages 35 ms on a mid-range CPU. The full pipeline, including preprocessing and decision logic, runs under 60 ms per frame, enabling sub-second reaction times at a 1.5 s interval.\nMeasuring OCR Accuracy # Capture 100 real in-game screenshots. Label the ground truth tokens manually. Use the following script to benchmark: A precision above 98% with recall around 96% has been observed. Variations arise from motion blur and gamma settings. For more rigorous analysis, a synthetic test harness replays archived footage at different frame rates while logging latency and recognition confidence. Profiling with tools such as VerySleepy or Visual Studio Performance Analyzer helps pinpoint bottlenecks in screen capture or Tesseract initialization, guiding further optimization.\nReliability Tests # Stress Reconnect: 100 forced disconnects with a 97% successful rejoin rate. Crash Dialog: 20 simulated crashes; handler closed the dialog in under 10 s each time. CPU Load: Under 10% average on a Ryzen 5600X. Security \u0026amp; Compliance #Ark Alarm V2 operates solely through window-level interactions. It does not inject code, patch memory, or modify network traffic. All inputs are simulated keyboard and mouse events available through standard OS APIs. This approach aims to respect the game\u0026rsquo;s terms of service and avoid anti-cheat triggers.\nThe project gathers no telemetry and stores configuration locally. Network communication is limited to user-defined webhooks for notifications. The codebase is released under the MIT License, allowing commercial and private use with minimal obligations. Contributors are expected to follow the project\u0026rsquo;s code of conduct and ensure that any third-party libraries comply with open-source distribution requirements.\nRoadmap #TODO\nFAQ # Is Ark Alarm V2 a cheat? No. It only observes the game window and automates rejoining; it does not alter gameplay mechanics. Why does OCR fail on certain resolutions? Ensure the window is not scaled by Windows DPI settings and capture the exact log area. Can I use languages other than English? Yes. Add the appropriate *.traineddata file to tessdata/ and set ocr.lang in the config. How do I debug overlay artifacts? Launch with --debug-overlay to draw bounding boxes and FPS statistics. Does it work on unofficial servers? It works as long as the server list appears in the standard Steam interface. Custom launchers may require additional scripting. How do I contribute? Fork the repository, add features or fixes, and submit a pull request. See CONTRIBUTING.md \u0026gt; TODO: write contributor guide. Where are logs stored? By default under %APPDATA%/ArkAlarm/logs. The path is configurable via config.log_path. Can I trigger external hardware alarms? Yes. Implement a plugin that toggles a GPIO pin or uses serial communication. Will V2 support Ark: Survival Ascended? Experimental support is being evaluated once stable APIs are available. How do I reset the settings? Delete the YAML configuration file; the application will regenerate defaults on next launch. Appendices #Minimal Reconnect Code Snippet #void Rejoiner::simulateJoin(const QString \u0026amp;server) { sendKey(Qt::Key_F1); // open favourites QThread::sleep(1); sendText(server); sendKey(Qt::Key_Return); } Dependency Links # Qt OpenCV Tesseract OCR MSYS2 ","date":"30 August 2025","permalink":"http://localhost:56847/posts/projects/ark-alarm-bot-v2/","section":"Posts","summary":"An automated Windows tool for ARK: Survival Ascended that uses C++17, Qt, and OCR-based image processing to provide reliable, unattended monitoring and alerts.","title":"Ark Alarm Bot V2"},{"content":"","date":null,"permalink":"http://localhost:56847/tags/projects/","section":"Tags","summary":"","title":"Projects"},{"content":"","date":null,"permalink":"http://localhost:56847/posts/projects/","section":"Posts","summary":"","title":"Projects"},{"content":"","date":null,"permalink":"http://localhost:56847/tags/congo/","section":"Tags","summary":"","title":"Congo"},{"content":"","date":null,"permalink":"http://localhost:56847/tags/first/","section":"Tags","summary":"","title":"First"},{"content":"","date":null,"permalink":"http://localhost:56847/tags/hugo/","section":"Tags","summary":"","title":"Hugo"},{"content":"Hello World 👋 #This is my very first blog post built with Hugo and the Congo theme.\nTo begin with, this post is more of an experiment than anything else. It helps me confirm that the site is set up correctly and that all the basic features—Markdown rendering, page bundles, and local images—are working as expected.\n✍️ Written in Markdown 📦 Structured as a Page Bundle 🖼️ Supports local images At the same time, I didn’t want my brand-new site to feel completely empty. A “Hello World” post feels like the perfect starting point—a small but meaningful step that marks the beginning of this blog.\nIn the future, I’ll be adding more posts to introduce myself, showcase some of my projects, and share other thoughts or technical notes along the way. Hopefully, over time, this space will grow into a collection of useful and interesting content that reflects both my work and my personal interests.\n","date":"29 August 2025","permalink":"http://localhost:56847/posts/my-first-post/","section":"Posts","summary":"My first blog post which tests the site functionally.","title":"My First Post"},{"content":"","date":null,"permalink":"http://localhost:56847/posts/","section":"Posts","summary":"All my blog posts","title":"Posts"},{"content":"Hi 👋 I’m Shunyao #This is my personal site built with Hugo + Congo.\n🎓 CS student at De Anza College, planning to transfer to a UC campus 💻 Projects: Ark Alarm Bot (C++17 + Qt, OpenCV, OCR) 🖥️ PC enthusiast \u0026amp; DIY builder, often helping friends assemble their first pcs 📷 Hobbyist photographer and former soccer player 🌏 Based in California Passion for Computer Science 💻 #My journey into computer science began back in middle school. When many classmates were playing PC games, I became fascinated with the idea of building my own machine so I could join them. That curiosity led me to DIY PC build videos, and before long, I was immersed in the world of computer hardware.\nBy the second year of middle school, after saving up for months, I finally built my first PC. It was an unforgettable experience: learning how to install an operating system, configure drivers, and even explore workarounds for internet restrictions in mainland China. That process not only introduced me to concepts like DNS and proxies, but also sparked a lasting passion for understanding how computers truly work.\nOver time, this interest grew into more than just a hobby. I started helping classmates and friends build their first PCs, guiding them from selecting components to completing their systems. Even today, I keep up with hardware news, benchmarks, and build guides—not because I own the most powerful setup, but because I love exploring, optimizing, and sharing knowledge.\nNow, as a CS student at De Anza College, I have the chance to study the field systematically, and I know for certain that computer science is not just a subject for me—it’s a discipline I want to keep exploring deeply.\nProjects 🔧 #One of my most meaningful projects is Ark Alarm Bot, an automated monitoring and alerting tool designed for ARK: Survival Evolved.\nMy long-term involvement with ARK inspired me to create a solution that combined image processing, automation, and error handling into a single system. What began as a way to solve challenges inside a game grew into a significant coding project, where I applied C++17, Qt, OpenCV, and OCR technologies.\nThis experience taught me how to take inspiration from my personal interests and transform it into a project that required real problem-solving skills, engineering discipline, and months of iterative development.\nBroader Interests 🎮⚽📷 #Beyond pure academics and projects, I have a range of interests that shaped who I am:\nGaming: My gaming experiences, particularly in survival and FPS titles, taught me teamwork, perseverance, and how to adapt to challenges. These experiences also inspired me to explore automation and system design, directly influencing projects like Ark Alarm Bot.\nSoccer: I started playing soccer in elementary school and continued throughout high school, often competing with classmates from different grades. Soccer gave me not only physical endurance but also lifelong friendships built through teamwork and shared passion.\nPhotography: In high school, I developed a love for capturing moments with a second-hand Fujifilm digital camera. Documenting campus life and fleeting scenes gave me a way to preserve memories and appreciate details in everyday life.\nClosing Thoughts ✨ #From building PCs and studying computer science, to developing projects inspired by personal interests, to the friendships made through sports and photography—each of these experiences reflects my curiosity, creativity, and persistence.\nThis blog is my space to continue sharing that journey: my projects, my passions, and the lessons I learn along the way.\n","date":"29 August 2025","permalink":"http://localhost:56847/about/","section":"Shunyao | Blog","summary":"","title":"About"},{"content":"","date":null,"permalink":"http://localhost:56847/tags/intro/","section":"Tags","summary":"","title":"Intro"},{"content":"","date":null,"permalink":"http://localhost:56847/tags/personal/","section":"Tags","summary":"","title":"Personal"},{"content":"","date":null,"permalink":"http://localhost:56847/categories/","section":"Categories","summary":"","title":"Categories"}]